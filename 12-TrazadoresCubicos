disp('-----------------TRAZADORES CUBICOS NATURALES----------------');
syms x;
format long;

%Inputs del programa
X = input('Ingresar valores de array Xn: ');    %Valores de X
Y = input('Ingresar valores de array F(Xn): '); %Valores de Y
aprox=input('Ingresar valor a aproximar: ');    %Valor a aproximar
n = length(X) - 1;                              %"n" usado para calcular los subintervalos

%Calcular los valores h que son los espacios entre nodos:
%Generar diff(X) da un array resultado con el valor de espaciado entre nodos
%EJEMPLO: X=[1 2 3 5] --> h=[1 1 2] 
h = diff(X); 

% Construcción del sistema para obtener M (segunda derivada)
A = zeros(n+1, n+1);
b = zeros(n+1, 1);

A(1,1) = 1;      % Condición de frontera natural
A(n+1, n+1) = 1; % Condición de frontera natural

for i = 2:n
    A(i, i-1) = h(i-1);
    A(i, i) = 2*(h(i-1) + h(i));
    A(i, i+1) = h(i);
    b(i) = 3 * ((Y(i+1) - Y(i))/h(i) - (Y(i) - Y(i-1))/h(i-1));
end

% Resolver el sistema para obtener los coeficientes M
M = A\b;

% Cálculo de coeficientes a, b, c, d
for i = 1:n
    a(i) = Y(i);
    b(i) = (Y(i+1) - Y(i))/h(i) - h(i)*(2*M(i) + M(i+1))/3;
    c(i) = M(i);
    d(i) = (M(i+1) - M(i)) / (3*h(i));
end

% Mostrar las funciones de cada trazador cubico
fprintf('Splines cúbicos naturales obtenidos:\n');
for i = 1:n
    S{i} = a(i) + b(i)*(x - X(i)) + c(i)*(x - X(i))^2 + d(i)*(x - X(i))^3;
    fprintf('S%d(x) en [%d,%d]:\n', i-1, X(i), X(i+1));
    pretty(vpa(S{i},9));
end

% Aproximación de un valor
for i = 1:n
    if X(i) <= aprox && aprox <= X(i+1)
        valor_aprox = double(subs(S{i}, x, aprox));
        fprintf('\nEl valor aproximado en x = %.2f es %.4f\n', aprox, valor_aprox);
        break;
    end
end
